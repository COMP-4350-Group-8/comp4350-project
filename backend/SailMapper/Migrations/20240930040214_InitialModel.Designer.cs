// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SailMapper.Data;

#nullable disable

namespace SailMapper.Migrations
{
    [DbContext(typeof(SailDBContext))]
    [Migration("20240930040214_InitialModel")]
    partial class InitialModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("SailMapper.Classes.Boat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Class")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RatingId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SailNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Skipper")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RatingId");

                    b.ToTable("Boats");
                });

            modelBuilder.Entity("SailMapper.Classes.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SailMapper.Classes.CourseMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("GateId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsStartLine")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<float>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<bool?>("Rounding")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("GateId");

                    b.ToTable("CourseMarks");
                });

            modelBuilder.Entity("SailMapper.Classes.Race", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReggataId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("ReggataId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("SailMapper.Classes.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Adjustment")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BaseRating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpinnakerAdjustment")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("SailMapper.Classes.Reggata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reggatas");
                });

            modelBuilder.Entity("SailMapper.Classes.Result", b =>
                {
                    b.Property<int>("BoatId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("CorrectedTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("ElapsedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("FinishPosition")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FinishType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Points")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("raceId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("BoatId");

                    b.HasIndex("raceId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("SailMapper.Classes.Track", b =>
                {
                    b.Property<int>("BoatId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Distance")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Finished")
                        .HasColumnType("TEXT");

                    b.Property<string>("GpxData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Started")
                        .HasColumnType("TEXT");

                    b.HasIndex("BoatId");

                    b.HasIndex("RaceId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("SailMapper.Classes.WeatherForecast", b =>
                {
                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("INTEGER");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("SailMapper.Classes.Boat", b =>
                {
                    b.HasOne("SailMapper.Classes.Rating", "Rating")
                        .WithMany("Boats")
                        .HasForeignKey("RatingId");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("SailMapper.Classes.CourseMark", b =>
                {
                    b.HasOne("SailMapper.Classes.Course", null)
                        .WithMany("courseMarks")
                        .HasForeignKey("CourseId");

                    b.HasOne("SailMapper.Classes.CourseMark", "Gate")
                        .WithMany()
                        .HasForeignKey("GateId");

                    b.Navigation("Gate");
                });

            modelBuilder.Entity("SailMapper.Classes.Race", b =>
                {
                    b.HasOne("SailMapper.Classes.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailMapper.Classes.Reggata", null)
                        .WithMany("Races")
                        .HasForeignKey("ReggataId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SailMapper.Classes.Result", b =>
                {
                    b.HasOne("SailMapper.Classes.Boat", "Boat")
                        .WithMany()
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailMapper.Classes.Race", "race")
                        .WithMany()
                        .HasForeignKey("raceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Boat");

                    b.Navigation("race");
                });

            modelBuilder.Entity("SailMapper.Classes.Track", b =>
                {
                    b.HasOne("SailMapper.Classes.Boat", "Boat")
                        .WithMany()
                        .HasForeignKey("BoatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SailMapper.Classes.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.Navigation("Boat");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("SailMapper.Classes.Course", b =>
                {
                    b.Navigation("courseMarks");
                });

            modelBuilder.Entity("SailMapper.Classes.Rating", b =>
                {
                    b.Navigation("Boats");
                });

            modelBuilder.Entity("SailMapper.Classes.Reggata", b =>
                {
                    b.Navigation("Races");
                });
#pragma warning restore 612, 618
        }
    }
}
